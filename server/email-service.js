import nodemailer from 'nodemailer';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs/promises';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const DATA_DIR = path.join(__dirname, 'data');
const JOBS_FILE = path.join(DATA_DIR, 'jobs.json');
const CONFIG_FILE = path.join(DATA_DIR, 'config.json');

const readJobs = async () => {
  try {
    const data = await fs.readFile(JOBS_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('Error reading jobs:', error);
    return [];
  }
};

const readConfig = async () => {
  try {
    const data = await fs.readFile(CONFIG_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('Error reading config:', error);
    return null;
  }
};

const createTransporter = (config) => {
  const emailConfig = {
    service: config.email.service,
    auth: {
      user: config.email.user,
      pass: config.email.password
    }
  };

  return nodemailer.createTransporter(emailConfig);
};

export const sendJobEmail = async (jobId) => {
  try {
    const config = await readConfig();
    if (!config) {
      throw new Error('No configuration found');
    }

    const jobs = await readJobs();
    const job = jobs.find(j => j.id === jobId);
    
    if (!job) {
      throw new Error('Job not found');
    }

    if (job.status !== 'completed') {
      throw new Error('Job not completed yet');
    }

    const transporter = createTransporter(config);

    // Create email content
    const emailBody = `
Job Application Package - ${job.title} at ${job.company}

Job Details:
- Position: ${job.title}
- Company: ${job.company}
- Application URL: ${job.url}
- Date Added: ${new Date(job.dateAdded).toLocaleDateString()}

Processed Documents:
- Tailored Resume: See attachment
- Cover Letter: See attachment
${job.questions && job.questions.length > 0 ? `- Application Questions Answered: ${job.questions.length} questions` : ''}

Application Questions & Answers:
${job.questions ? job.questions.map((qa, index) => 
  `${index + 1}. ${qa.question}\n   Answer: ${qa.answer}\n`
).join('\n') : 'No questions found on the application page.'}

Next Steps:
1. Review the tailored resume and cover letter
2. Visit the application URL: ${job.url}
3. Submit your application using the provided materials

Good luck with your application!

---
Generated by Job Application Automator
`;

    // Create attachments
    const attachments = [];

    if (job.tailoredResume) {
      attachments.push({
        filename: `${job.company}_${job.title}_Resume.txt`.replace(/[^a-zA-Z0-9._-]/g, '_'),
        content: job.tailoredResume
      });
    }

    if (job.coverLetter) {
      attachments.push({
        filename: `${job.company}_${job.title}_CoverLetter.txt`.replace(/[^a-zA-Z0-9._-]/g, '_'),
        content: job.coverLetter
      });
    }

    if (job.questions && job.questions.length > 0) {
      const questionsContent = job.questions.map((qa, index) => 
        `Question ${index + 1}: ${qa.question}\n\nAnswer: ${qa.answer}\n\n${'='.repeat(50)}\n\n`
      ).join('');
      
      attachments.push({
        filename: `${job.company}_${job.title}_Questions.txt`.replace(/[^a-zA-Z0-9._-]/g, '_'),
        content: questionsContent
      });
    }

    const mailOptions = {
      from: config.email.user,
      to: config.email.user, // Send to self
      subject: `Job Application Package - ${job.title} at ${job.company}`,
      text: emailBody,
      attachments
    };

    await transporter.sendMail(mailOptions);
    console.log(`Email sent successfully for job: ${job.title} at ${job.company}`);

  } catch (error) {
    console.error('Email sending failed:', error);
    throw error;
  }
};

export const sendAllCompletedJobs = async () => {
  const jobs = await readJobs();
  const completedJobs = jobs.filter(job => job.status === 'completed');

  for (const job of completedJobs) {
    try {
      await sendJobEmail(job.id);
    } catch (error) {
      console.error(`Failed to send email for job ${job.id}:`, error);
    }
  }
};